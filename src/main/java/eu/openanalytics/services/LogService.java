/**
 * Copyright 2016 Open Analytics, Belgium
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package eu.openanalytics.services;

import java.io.FileOutputStream;
import java.io.IOException;
import java.net.InetAddress;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import javax.activation.DataHandler;
import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;
import javax.inject.Inject;
import javax.mail.BodyPart;
import javax.mail.Message;
import javax.mail.Multipart;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;

import org.apache.log4j.Logger;
import org.springframework.core.env.Environment;
import org.springframework.stereotype.Service;

import com.spotify.docker.client.LogStream;

import eu.openanalytics.services.DockerService.Proxy;

@Service
public class LogService {

	private String containerPath;
	private ExecutorService executor;

	private String supportAddress;
	private String supportSMTPServer;
	
	private Logger log = Logger.getLogger(LogService.class);
	
	@Inject
	DockerService dockerService;
	
	@Inject
	Environment environment;
	
	@PostConstruct
	public void init() {
		containerPath = environment.getProperty("shiny.proxy.support.container-log-path");
		if (containerPath != null) {
			try {
				Files.createDirectories(Paths.get(containerPath));
				executor = Executors.newCachedThreadPool();
				log.info("Container logging enabled. Logs will be saved to " + containerPath);
			} catch (IOException e) {
				log.error("Failed to initialize container logging directory at " + containerPath, e);
			}
		}
		
		supportAddress = environment.getProperty("shiny.proxy.support.support-mail-address");
		supportSMTPServer = environment.getProperty("shiny.proxy.support.support-smtp-server");
	}
	
	@PreDestroy
	public void shutdown() {
		if (executor != null) executor.shutdown();
	}

	public boolean isContainerLoggingEnabled() {
		return containerPath != null && executor != null;
	}
	
	public boolean isReportingEnabled() {
		return supportAddress != null && supportSMTPServer != null;
	}

	public void attachLogWriter(Proxy proxy, LogStream logStream) {
		if (!isContainerLoggingEnabled()) return;
		executor.submit(() -> {
			try {
				Path[] paths = getLogFilePaths(proxy.containerId);
				// Note that this call will block until the container is stopped.
				logStream.attach(new FileOutputStream(paths[0].toFile()), new FileOutputStream(paths[1].toFile()));
			} catch (IOException e) {
				log.error("Failed to attach logging of container " + proxy.containerId, e);
			}
		});
	}
	
	public void sendSupportMail(IssueForm form) {
		if (!isReportingEnabled()) {
			log.error("Cannot send support mail: no address is configured");
			return;
		}
		
		try {
			Properties props = new Properties();
			props.put("mail.smtp.host", supportSMTPServer);
			Session session = Session.getDefaultInstance(props, null);

			MimeMessage message = new MimeMessage(session);
			
			String from = InetAddress.getLocalHost().getHostName() + "@shinyproxy.io";
			message.setFrom(new InternetAddress(from));
			message.addRecipient(Message.RecipientType.TO, new InternetAddress(supportAddress));
			message.setSubject("ShinyProxy Error Report");

			Multipart multipart = new MimeMultipart("mixed");
			BodyPart textBodyPart = new MimeBodyPart();
			
			StringBuilder body = new StringBuilder();
			String lineSep = System.getProperty("line.separator");
			body.append(String.format("This is an error report generated by ShinyProxy%s", lineSep));
			body.append(String.format("User: %s%s", form.userName, lineSep));
			if (form.appName != null) body.append(String.format("App: %s%s", form.appName, lineSep));
			if (form.currentLocation != null) body.append(String.format("Location: %s%s", form.currentLocation, lineSep));
			if (form.customMessage != null) body.append(String.format("Message: %s%s", form.customMessage, lineSep));
			textBodyPart.setText(body.toString());
			multipart.addBodyPart(textBodyPart);
			
			List<URL> attachments = new ArrayList<>();
			if (isContainerLoggingEnabled()) {
				Proxy activeProxy = null;
				for (Proxy proxy: dockerService.listProxies()) {
					if (proxy.userName.equals(form.getUserName()) && proxy.appName.equals(form.getAppName())) {
						activeProxy = proxy;
						break;
					}
				}
				if (activeProxy != null) {
					Path[] filePaths = getLogFilePaths(activeProxy.containerId);
					for (Path p: filePaths) {
						if (Files.exists(p)) attachments.add(p.toUri().toURL());
					}
				}
			}
			
			for (URL attachment: attachments) {
				BodyPart attachmentBodyPart = new MimeBodyPart();
				attachmentBodyPart.setDataHandler(new DataHandler(attachment));
				attachmentBodyPart.setFileName(Paths.get(attachment.getFile()).getFileName().toString());
				multipart.addBodyPart(attachmentBodyPart);
			}
			message.setContent(multipart);

			Transport.send(message);
		} catch (Exception e) {
			throw new RuntimeException("Failed to send email", e);
		}
	}
	
	private Path[] getLogFilePaths(String containerId) {
		return new Path[] {
			Paths.get(containerPath, containerId + "_stdout.log"),
			Paths.get(containerPath, containerId + "_stderr.log")
		};
	}
	
	public static class IssueForm {
		
		private String userName;
		private String appName;
		private String currentLocation;
		private String customMessage;
		
		public String getUserName() {
			return userName;
		}
		public void setUserName(String userName) {
			this.userName = userName;
		}
		public String getAppName() {
			return appName;
		}
		public void setAppName(String appName) {
			this.appName = appName;
		}
		public String getCurrentLocation() {
			return currentLocation;
		}
		public void setCurrentLocation(String currentLocation) {
			this.currentLocation = currentLocation;
		}
		public String getCustomMessage() {
			return customMessage;
		}
		public void setCustomMessage(String customMessage) {
			this.customMessage = customMessage;
		}
	}
}
